# Define a function for solving the 0/1 knapsack problem using dynamic programming.
def knapsack_dynamic_programming(values, weights, capacity):
    # Get the number of items to consider.
    n = len(values)

    # Create a 2D array 'dp' to store the maximum values for different subproblems.
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # Populate the 'dp' array using a bottom-up approach.
    for i in range(1, n + 1):
        for j in range(capacity + 1):
            # Check if the weight of the current item can fit in the knapsack.
            if weights[i - 1] <= j:
                # If it can fit, decide whether to include it or not to maximize the value.
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + values[i - 1])
            else:
                # If it cannot fit, the value is the same as not including the item.
                dp[i][j] = dp[i - 1][j]

    # Backtrack to find the selected items.
    selected_items = []
    i, j = n, capacity
    while i > 0 and j > 0:
        if dp[i][j] != dp[i - 1][j]:
            # The current item is included in the knapsack.
            selected_items.append(i - 1)
            j -= weights[i - 1]
        i -= 1

    # Return the maximum value and the list of selected items.
    return dp[n][capacity], selected_items[::-1]

# Define the values, weights, and knapsack capacity.
values = [60, 50, 35, 20]
weights = [10, 15, 5, 25]
capacity = 30

# Call the 'knapsack_dynamic_programming' function to solve the problem.
max_value, selected_items = knapsack_dynamic_programming(values, weights, capacity)

# Print the results.
print("Maximum value:", max_value)
print("Selected items:", selected_items)
