import pandas as pd 
import numpy as np
import seaborn as sns 
import matplotlib as plt
import haversine as hs

df = pd.read_csv('uber.csv')
df

df.info()

df.columns

df = df.drop(['Unnamed: 0', 'key'], axis=1)

df.isnull().sum()

df['dropoff_longitude'].fillna(value = df['dropoff_longitude'].mean(), inplace = True)
df['dropoff_latitude'].fillna(value = df['dropoff_latitude'].median(), inplace = True)

df.isnull().sum()

df.dtypes

df.pickup_datetime = pd.to_datetime(df.pickup_datetime, errors = 'coerce')

df = df.assign(hour = df.pickup_datetime.dt.hour,
              day = df.pickup_datetime.dt.day,
              month = df.pickup_datetime.dt.month,
              year = df.pickup_datetime.dt.year,
              dayoffweek = df.pickup_datetime.dt.dayofweek)

df.plot(kind = 'box', subplots = True , layout = (7,2), figsize = (15, 20))

#Using the InterQuartile Range to fill the values
def remove_outlier(data1 , col):
    Q1 = data1[col].quantile(0.25)
    Q3 = data1[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_whisker = Q1-1.5*IQR
    upper_whisker = Q3+1.5*IQR
    df[col] = np.clip(data1[col] , lower_whisker , upper_whisker)
    return data1

def treat_outliers_all(data1 , col_list):
    for c in col_list:
        data1 = remove_outlier(df, c)
    return data1

df = treat_outliers_all(df, df.columns)

df.plot(kind = "box",subplots = True,layout = (7,2),figsize=(15,20))

!pip install haversine 

travel_dist = []
for pos in range(len(df['pickup_longitude'])):
        long1,lati1,long2,lati2 = [df['pickup_longitude'][pos],df['pickup_latitude'][pos],df['dropoff_longitude'][pos],df['dropoff_latitude'][pos]]
        loc1=(lati1,long1)
        loc2=(lati2,long2)
        c = hs.haversine(loc1,loc2)
        travel_dist.append(c)

print(travel_dist)
df['dist_travel_km'] = travel_dist
df.head()

x = df[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count','hour','day','month','year','dayoffweek','dist_travel_km']]
y = df['fare_amount']

x
y

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
x_train, x_test, y_train,y_test = train_test_split(x,y,test_size = 0.33)

from sklearn.linear_model import LinearRegression
regression = LinearRegression()

regression.fit(x_train,y_train)

regression.intercept_ #To find the linear intercept

regression.coef_

pred=regression.predict(x_test)
pred

from sklearn.metrics import r2_score

r2_score(y_test,pred)

MSE = mean_squared_error(y_test,pred)
MSE

RMSE = np.sqrt(MSE)
RMSE






